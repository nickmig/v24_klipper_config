[delayed_gcode setsbready]
initial_duration: 1
gcode:
  STATUS_READY

[neopixel sb_leds]
pin:PB0
#   The pin connected to the neopixel. This parameter must be
#   provided.
chain_count:4
#   The number of Neopixel chips that are "daisy chained" to the
#   provided pin. The default is 1 (which indicates only a single
#   Neopixel is connected to the pin).
color_order: GRBW
#   Set the pixel order required by the LED hardware. Options are GRB,
#   RGB, GRBW, or RGBW. The default is GRB.
#initial_RED: 0.0
#initial_GREEN: 0.0
#initial_BLUE: 0.0
initial_WHITE: 0
#   Sets the initial LED color of the Neopixel. Each value should be
#   between 0.0 and 1.0. The WHITE option is only available on RGBW
#   LEDs. The default for each color is 0.


# Macros for setting the status leds on the Voron StealthBurner toolhead (or for any neopixel-type leds).
#
# You will need to configure a neopixel (or other addressable led, such as dotstar). See
# https://www.klipper3d.org/Config_Reference.html#neopixel for configuration details.
#
# CONFIGURATION
#
# Example neopixel configuration:
# [neopixel sb_leds]
# pin: <your pin>
# #   The pin connected to the neopixel. This parameter must be
# #   provided.
# chain_count: 3
# #   The number of Neopixel chips that are "daisy chained" to the
# #   provided pin. The default is 1 (which indicates only a single
# #   Neopixel is connected to the pin).
# color_order: GRBW
# #   Set the pixel order required by the LED hardware. Options are GRB,
# #   RGB, GRBW, or RGBW. The default is GRB.
# initial_RED: 0.0
# initial_GREEN: 0.0
# initial_BLUE: 0.0
# initial_WHITE: 0.0
# #   Sets the initial LED color of the Neopixel. Each value should be
# #   between 0.0 and 1.0. The WHITE option is only available on RGBW
# #   LEDs. The default for each color is 0.#
#
# Most configuration for the macros can be done by modifying the variables in the _sb_vars macro
# at the start of this file. 
#
# MACROS
#
# The following status macros are available:
#    STATUS_READY
#    STATUS_OFF
#    STATUS_BUSY
#    STATUS_HEATING
#    STATUS_LEVELING
#    STATUS_HOMING
#    STATUS_CLEANING
#    STATUS_MESHING
#    STATUS_CALIBRATING_Z
# With additional macros for direct control:
#    SET_NOZZLE_LEDS_ON
#    SET_LOGO_LEDS_OFF
#    SET_NOZZLE_LEDS_OFF
#
# Contributed by Voron discord users wile.e, Tetsunosuke, and etherwalker

[gcode_macro _sb_vars]
# User settings for the StealthBurner status leds. You can change the status colors and led
# configurations for the logo and nozzle here.
variable_colors: {
        'logo': { # Colors for logo states
            'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},
            'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},
            'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},
            'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},
            'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},
            'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},
            'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},
            'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
            'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
            'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},
        },
        'nozzle': { # Colors for nozzle states
            'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},
            'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
            'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},
            'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},
        },
        'thermal': {
            'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
            'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}
        }
    }
variable_logo_led_name:         "sb_leds" 
# The name of the addressable LED chain that contains the logo LED(s)
variable_logo_idx:              "2" 
# A comma-separated list of indexes LEDs in the logo
variable_nozzle_led_name:       "sb_leds"
# The name of the addressable LED chain that contains the nozzle LED(s). This will
# typically be the same LED chain as the logo.
variable_nozzle_idx:            "3,4"
# A comma-separated list of indexes of LEDs in the nozzle

variable_thermal_config: {
        'extruder': {
            'cool_temp': 40,
            'leds': 'logo',
        },
        'heater_bed': {
            'cool_temp': 40,
            'leds': 'nozzle',
        },
    }
# temperatures at which cooling will be considered complete

gcode:
    ; Do nothing

[gcode_macro _set_sb_leds]
gcode:
    {% set red = params.RED|default(0)|float %}
    {% set green = params.GREEN|default(0)|float %}
    {% set blue = params.BLUE|default(0)|float %}
    {% set white = params.WHITE|default(0)|float %}
    {% set led = params.LED|string %}
    {% set idx = (params.IDX|string).split(',') %}
    {% set transmit_last = params.TRANSMIT|default(1) %}
    
    {% for led_index in idx %}
        {% set transmit=transmit_last if loop.last else 0 %}
        set_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}
    {% endfor %}

[gcode_macro _set_sb_leds_by_name]
gcode:
    {% set leds_name = params.LEDS %}
    {% set color_name = params.COLOR %}
    {% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}
    {% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}
    {% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}
    {% set transmit = params.TRANSMIT|default(1) %}

    _set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}

[gcode_macro _set_logo_leds]
gcode:
    {% set red = params.RED|default(0)|float %}
    {% set green = params.GREEN|default(0)|float %}
    {% set blue = params.BLUE|default(0)|float %}
    {% set white = params.WHITE|default(0)|float %}
    {% set led = printer["gcode_macro _sb_vars"].logo_led_name %}
    {% set idx = printer["gcode_macro _sb_vars"].logo_idx %}
    {% set transmit=params.TRANSMIT|default(1) %}

    _set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}

[gcode_macro _set_nozzle_leds]
gcode:
    {% set red = params.RED|default(0)|float %}
    {% set green = params.GREEN|default(0)|float %}
    {% set blue = params.BLUE|default(0)|float %}
    {% set white = params.WHITE|default(0)|float %}
    {% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}
    {% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}
    {% set transmit=params.TRANSMIT|default(1) %}

    _set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}

[gcode_macro set_logo_leds_off]
gcode:
    {% set transmit=params.TRANSMIT|default(1) %}
    _set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}

[gcode_macro set_nozzle_leds_on]
gcode:
    {% set transmit=params.TRANSMIT|default(1) %}
    _set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}

[gcode_macro set_nozzle_leds_off]
gcode:
    {% set transmit=params.TRANSMIT|default(1) %}
    _set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}

[gcode_macro status_off]
gcode:
    set_logo_leds_off transmit=0
    set_nozzle_leds_off

[gcode_macro status_ready]
gcode:
    _set_sb_leds_by_name leds="logo" color="standby" transmit=0
    _set_sb_leds_by_name leds="nozzle" color="standby" transmit=1

[gcode_macro status_busy]
gcode:
    _set_sb_leds_by_name leds="logo" color="busy" transmit=0
    set_nozzle_leds_on

[gcode_macro status_heating]
gcode:
    _set_sb_leds_by_name leds="logo" color="heating" transmit=0
    _set_sb_leds_by_name leds="nozzle" color="heating" transmit=1

[gcode_macro status_leveling]
gcode:
    _set_sb_leds_by_name leds="logo" color="leveling" transmit=0
    set_nozzle_leds_on

[gcode_macro status_homing]
gcode:
    _set_sb_leds_by_name leds="logo" color="homing" transmit=0
    set_nozzle_leds_on

[gcode_macro status_cleaning]
gcode:
    _set_sb_leds_by_name leds="logo" color="cleaning" transmit=0
    set_nozzle_leds_on

[gcode_macro status_meshing]
gcode:
    _set_sb_leds_by_name leds="logo" color="meshing" transmit=0
    set_nozzle_leds_on

[gcode_macro status_calibrating_z]
gcode:
    _set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0
    set_nozzle_leds_on

[gcode_macro status_printing]
gcode:
    _set_sb_leds_by_name leds="logo" color="printing" transmit=0
    set_nozzle_leds_on

# The following was copied from Whistlinric
# Keywords can be identified in M117 commands e.g. "Printing has been completed" == 'complete'


####################################################################
#          Low level WLED macros via moonraker
####################################################################

# Set LCD RGB at startup
[delayed_gcode RESETRGB_ONSTARTUP]
initial_duration: 5
gcode:
    RESETRGB

##  Set RGB values on boot up for each Neopixel. 
##  Index 1 = display, Index 2 and 3 = Knob (not correct for my voronpi 2.4)
##  Index 3 = display, Index 1 and 2 = Knob

[gcode_macro RESETRGB]
description: Default RGB for display and printer lights
gcode:
    #insert lcd rgb reset code here
    _LIGHTS_FLICKER

[gcode_macro WLED_ON]
description: Turn WLED strip on using optional preset
gcode:
  {% set strip = params.STRIP|string %}
  {% set preset = params.PRESET|default(-1)|int %}

  {action_call_remote_method("set_wled_state",
                             strip=strip,
                             state=True,
                             preset=preset)}

[gcode_macro WLED_OFF]
description: Turn WLED strip off
gcode:
  {% set strip = params.STRIP|string %}

  {action_call_remote_method("set_wled_state",
                             strip=strip,
                             state=False)}

[gcode_macro SET_WLED]
description: SET_LED like functionlity for WLED
gcode:
    {% set strip = params.STRIP|string %}
    {% set red = params.RED|default(0)|float %}
    {% set green = params.GREEN|default(0)|float %}
    {% set blue = params.BLUE|default(0)|float %}
    {% set white = params.WHITE|default(0)|float %}
    {% set index = params.INDEX|default(-1)|int %}
    {% set transmit = params.TRANSMIT|default(1)|int %}

    {action_call_remote_method("set_wled",
                               strip=strip,
                               red=red, green=green, blue=blue, white=white,
                               index=index, transmit=transmit)}

####################################################################
#          Macros
####################################################################
[gcode_macro _status_presets]
variable_off: -99
variable_lookup: {
        'off': 5,
        'ready': 2,
        'busy':  6,
        'heating': 4,
        'extruder': 13,
        'leveling': 8,
        'homing': 9,
        'meshing': 10,
        'printing': 11,
        'complete': 12,
        'idle': 14,
        'busy':  6
    }
gcode:
    # Do nothing
    
[gcode_macro LIGHTS]
description: Example LIGHTS R=1 G=0 B=0 or LIGHTS PS=4 or e.g. LIGHTS STATUS=printing
gcode:
    {% set R = params.R|default(1)|float %}
    {% set G = params.G|default(1)|float %}
    {% set B = params.B|default(1)|float %}
    {% set PS = params.PS|default(-1)|int %}
    {% set STATUS = params.STATUS|default('')|string %}
    
    {% if STATUS != '' %}
        {% set PS = printer["gcode_macro _status_presets"].lookup[STATUS] %}
    {% endif %}
    
    {% if PS == printer["gcode_macro _status_presets"].off %}
        LIGHTS_OFF
    {% elif PS >= 0 %}
        WLED_ON STRIP=lights PRESET={PS}
    {% else %}
        SET_WLED STRIP=lights RED={R} GREEN={G} BLUE={B} TRANSMIT=1
    {% endif %}

[gcode_macro LIGHTS_OFF]
description: WLED lights and LCD lights off
gcode:
    WLED_OFF STRIP=lights

[gcode_macro LIGHTS_RANDOM]
gcode:
    {% for led in range(79|int) %}
        SET_WLED STRIP=lights RED={(range(0,100) | random) / 100} GREEN={(range(0,100) | random) / 100} BLUE={(range(0,100) | random) / 100} INDEX={led+1} TRANSMIT=1
        G4 P15
    {% endfor %}

# For M117 messages looks for the _status_presets strings in increasing priority order
# in the message, a status determined to be printing will perform a M117 to allow printing
# progress status to be displayed on the LCD
[gcode_macro M117]
rename_existing: M117.1
gcode:
    {% set ns = namespace(printing=false) %}
    
    # Check if M117 is empty - back to ready status
    {% if rawparams|trim == '' %}
        LIGHTS STATUS=ready
    {% else %}
        # Look for status names in message text
        {% for key, value in printer["gcode_macro _status_presets"].lookup.items() %}
             {% if key.upper() in rawparams.upper() %}
                 LIGHTS STATUS='{key}'                  # could also use value as PS=
                 
                 {% if key == 'printing' %}
                    {% set ns.printing=true %}
                 {% elif ns.printing %}
                    {% set ns.printing=false %}
                 {% endif %}
             {% endif %}
        {% endfor %}
    {% endif %}
    
    # Don't show a 'printing' message so that status updates on the lcd
    {% if ns.printing %}
        M117.1
    {% else %}
        M117.1 {rawparams}
    {% endif %}

###############################
# TimBot99 neat "turn-on" macro
[gcode_macro _LIGHTS_FLICKER]
gcode:
    {% set LEDTimes = [10, 20, 20, 240, 20, 40, 20, 100, 20, 20, 20, 260, 80, 20, 240, 60, 160, 20, 240, 20, 1000, 20, 20, 40, 100, 20, 274, 340, 860, 20, 1400, 20, 60, 20] %}
    {% set LED_Strip = "lights" %}
    # Target colour is a warm white
    {% set R = 255/255 %}
    {% set G = 191/255 %}
    {% set B = 130/255 %}

    {% for toggletime in LEDTimes %}
      {% set ledTime = toggletime|string %}
      {% set loopCount = loop.index %}

      {% if loopCount is divisibleby 2 %} # If the loop index is divisible by 2 (first index is NOT so the LEd should turn ON)
        SET_WLED STRIP=lights RED={R} GREEN={G} BLUE={B} TRANSMIT=1
        G4 P{ledTime|int}
      {% else %}
        SET_WLED STRIP=lights RED=0 GREEN=0 BLUE=0 TRANSMIT=1
        G4 P{ledTime|int}
      {% endif %}

    {% endfor %}